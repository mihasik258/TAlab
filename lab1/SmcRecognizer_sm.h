//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SmcRecognizer.sm
//

#ifndef SMCRECOGNIZER_SM_H
#define SMCRECOGNIZER_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_H_state;
class Map1_HT_state;
class Map1_HTT_state;
class Map1_HTTP_state;
class Map1_Colon_state;
class Map1_FirstSlash_state;
class Map1_SecondSlash_state;
class Map1_ServerName_state;
class Map1_DomainName_state;
class Map1_ZoneName_state;
class Map1_OK;
class Map1_SAD;
class Map1_Default;
class SmcRecognizerState;
class SmcRecognizerContext;
class SmcRecognizer;

class SmcRecognizerState :
    public statemap::State
{
public:

    SmcRecognizerState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(SmcRecognizerContext&) {};
    virtual void Exit(SmcRecognizerContext&) {};

    virtual void Colon(SmcRecognizerContext& context, char symb);
    virtual void EOS(SmcRecognizerContext& context);
    virtual void H(SmcRecognizerContext& context, char symb);
    virtual void Letter(SmcRecognizerContext& context, char symb);
    virtual void P(SmcRecognizerContext& context, char symb);
    virtual void Point(SmcRecognizerContext& context, char symb);
    virtual void Slash(SmcRecognizerContext& context, char symb);
    virtual void T(SmcRecognizerContext& context, char symb);
    virtual void Unknown(SmcRecognizerContext& context);
    virtual void Whitespace(SmcRecognizerContext& context);

protected:

    virtual void Default(SmcRecognizerContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_H_state H_state;
    static Map1_HT_state HT_state;
    static Map1_HTT_state HTT_state;
    static Map1_HTTP_state HTTP_state;
    static Map1_Colon_state Colon_state;
    static Map1_FirstSlash_state FirstSlash_state;
    static Map1_SecondSlash_state SecondSlash_state;
    static Map1_ServerName_state ServerName_state;
    static Map1_DomainName_state DomainName_state;
    static Map1_ZoneName_state ZoneName_state;
    static Map1_OK OK;
    static Map1_SAD SAD;
};

class Map1_Default :
    public SmcRecognizerState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : SmcRecognizerState(name, stateId)
    {};

    virtual void Whitespace(SmcRecognizerContext& context);
    virtual void Letter(SmcRecognizerContext& context, char symb);
    virtual void Slash(SmcRecognizerContext& context, char symb);
    virtual void Point(SmcRecognizerContext& context, char symb);
    virtual void EOS(SmcRecognizerContext& context);
    virtual void Unknown(SmcRecognizerContext& context);
};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void H(SmcRecognizerContext& context, char symb);
};

class Map1_H_state :
    public Map1_Default
{
public:
    Map1_H_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void T(SmcRecognizerContext& context, char symb);
};

class Map1_HT_state :
    public Map1_Default
{
public:
    Map1_HT_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void T(SmcRecognizerContext& context, char symb);
};

class Map1_HTT_state :
    public Map1_Default
{
public:
    Map1_HTT_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void P(SmcRecognizerContext& context, char symb);
};

class Map1_HTTP_state :
    public Map1_Default
{
public:
    Map1_HTTP_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Colon(SmcRecognizerContext& context, char symb);
};

class Map1_Colon_state :
    public Map1_Default
{
public:
    Map1_Colon_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Slash(SmcRecognizerContext& context, char symb);
};

class Map1_FirstSlash_state :
    public Map1_Default
{
public:
    Map1_FirstSlash_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Slash(SmcRecognizerContext& context, char symb);
};

class Map1_SecondSlash_state :
    public Map1_Default
{
public:
    Map1_SecondSlash_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Letter(SmcRecognizerContext& context, char symb);
};

class Map1_ServerName_state :
    public Map1_Default
{
public:
    Map1_ServerName_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Letter(SmcRecognizerContext& context, char symb);
    virtual void Point(SmcRecognizerContext& context, char symb);
    virtual void Unknown(SmcRecognizerContext& context);
};

class Map1_DomainName_state :
    public Map1_Default
{
public:
    Map1_DomainName_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(SmcRecognizerContext& context);
    virtual void Letter(SmcRecognizerContext& context, char symb);
    virtual void Point(SmcRecognizerContext& context, char symb);
    virtual void Unknown(SmcRecognizerContext& context);
};

class Map1_ZoneName_state :
    public Map1_Default
{
public:
    Map1_ZoneName_state(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(SmcRecognizerContext& context);
    virtual void Letter(SmcRecognizerContext& context, char symb);
    virtual void Point(SmcRecognizerContext& context, char symb);
    virtual void Unknown(SmcRecognizerContext& context);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class Map1_SAD :
    public Map1_Default
{
public:
    Map1_SAD(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class SmcRecognizerContext :
    public statemap::FSMContext
{
public:

    explicit SmcRecognizerContext(SmcRecognizer& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    SmcRecognizerContext(SmcRecognizer& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline SmcRecognizer& getOwner()
    {
        return (_owner);
    };

    inline SmcRecognizerState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<SmcRecognizerState&>(*_state);
    };

    inline void Colon(char symb)
    {
        getState().Colon(*this, symb);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void H(char symb)
    {
        getState().H(*this, symb);
    };

    inline void Letter(char symb)
    {
        getState().Letter(*this, symb);
    };

    inline void P(char symb)
    {
        getState().P(*this, symb);
    };

    inline void Point(char symb)
    {
        getState().Point(*this, symb);
    };

    inline void Slash(char symb)
    {
        getState().Slash(*this, symb);
    };

    inline void T(char symb)
    {
        getState().T(*this, symb);
    };

    inline void Unknown()
    {
        getState().Unknown(*this);
    };

    inline void Whitespace()
    {
        getState().Whitespace(*this);
    };

private:
    SmcRecognizer& _owner;
};


#endif // SMCRECOGNIZER_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
