//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SmcRecognizer.sm
//

#include "SmcRecognizer.h"
#include "/home/toaster/CLionProjects/untitled5/SmcRecognizer_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_H_state Map1::H_state("Map1::H_state", 1);
Map1_HT_state Map1::HT_state("Map1::HT_state", 2);
Map1_HTT_state Map1::HTT_state("Map1::HTT_state", 3);
Map1_HTTP_state Map1::HTTP_state("Map1::HTTP_state", 4);
Map1_Colon_state Map1::Colon_state("Map1::Colon_state", 5);
Map1_FirstSlash_state Map1::FirstSlash_state("Map1::FirstSlash_state", 6);
Map1_SecondSlash_state Map1::SecondSlash_state("Map1::SecondSlash_state", 7);
Map1_ServerName_state Map1::ServerName_state("Map1::ServerName_state", 8);
Map1_DomainName_state Map1::DomainName_state("Map1::DomainName_state", 9);
Map1_ZoneName_state Map1::ZoneName_state("Map1::ZoneName_state", 10);
Map1_OK Map1::OK("Map1::OK", 11);
Map1_SAD Map1::SAD("Map1::SAD", 12);

void SmcRecognizerState::Colon(SmcRecognizerContext& context, char symb)
{
    Default(context);
}

void SmcRecognizerState::EOS(SmcRecognizerContext& context)
{
    Default(context);
}

void SmcRecognizerState::H(SmcRecognizerContext& context, char symb)
{
    Default(context);
}

void SmcRecognizerState::Letter(SmcRecognizerContext& context, char symb)
{
    Default(context);
}

void SmcRecognizerState::P(SmcRecognizerContext& context, char symb)
{
    Default(context);
}

void SmcRecognizerState::Point(SmcRecognizerContext& context, char symb)
{
    Default(context);
}

void SmcRecognizerState::Slash(SmcRecognizerContext& context, char symb)
{
    Default(context);
}

void SmcRecognizerState::T(SmcRecognizerContext& context, char symb)
{
    Default(context);
}

void SmcRecognizerState::Unknown(SmcRecognizerContext& context)
{
    Default(context);
}

void SmcRecognizerState::Whitespace(SmcRecognizerContext& context)
{
    Default(context);
}

void SmcRecognizerState::Default(SmcRecognizerContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void Map1_Default::Whitespace(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    SmcRecognizerState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void Map1_Default::Letter(SmcRecognizerContext& context, char symb)
{
    SmcRecognizer& ctxt = context.getOwner();

    SmcRecognizerState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void Map1_Default::Slash(SmcRecognizerContext& context, char symb)
{
    SmcRecognizer& ctxt = context.getOwner();

    SmcRecognizerState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void Map1_Default::Point(SmcRecognizerContext& context, char symb)
{
    SmcRecognizer& ctxt = context.getOwner();

    SmcRecognizerState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void Map1_Default::EOS(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    SmcRecognizerState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void Map1_Default::Unknown(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    SmcRecognizerState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void Map1_Start::H(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::H_state);
    context.getState().Entry(context);


}

void Map1_H_state::T(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::HT_state);
    context.getState().Entry(context);


}

void Map1_HT_state::T(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::HTT_state);
    context.getState().Entry(context);


}

void Map1_HTT_state::P(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::HTTP_state);
    context.getState().Entry(context);


}

void Map1_HTTP_state::Colon(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::Colon_state);
    context.getState().Entry(context);


}

void Map1_Colon_state::Slash(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::FirstSlash_state);
    context.getState().Entry(context);


}

void Map1_FirstSlash_state::Slash(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::SecondSlash_state);
    context.getState().Entry(context);


}

void Map1_SecondSlash_state::Letter(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::ServerName_state);
    context.getState().Entry(context);


}

void Map1_ServerName_state::Letter(SmcRecognizerContext& context, char symb)
{
    SmcRecognizer& ctxt = context.getOwner();

    if ((ctxt.serverNameLen()))
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.addSymb(symb);
            context.setState(Map1::ServerName_state);
        }
        catch (...)
        {
            context.setState(Map1::ServerName_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (!(ctxt.serverNameLen()))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(Map1::SAD);
        }
        catch (...)
        {
            context.setState(Map1::SAD);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::Letter(context, symb);
    }


}

void Map1_ServerName_state::Point(SmcRecognizerContext& context, char symb)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.saveServerName();
        context.setState(Map1::DomainName_state);
    }
    catch (...)
    {
        context.setState(Map1::DomainName_state);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_ServerName_state::Unknown(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::SAD);
    }
    catch (...)
    {
        context.setState(Map1::SAD);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_DomainName_state::EOS(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    if ((ctxt.domainZoneNameLen()))
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.addToTable();
            ctxt.Acceptable();
            context.setState(Map1::OK);
        }
        catch (...)
        {
            context.setState(Map1::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::EOS(context);
    }


}

void Map1_DomainName_state::Letter(SmcRecognizerContext& context, char symb)
{
    SmcRecognizer& ctxt = context.getOwner();

    if ((ctxt.domainZoneNameLen()))
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::DomainName_state);
        context.getState().Entry(context);
    }
    else if ((ctxt.domainNameLen()))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::DomainName_state);
        context.getState().Entry(context);
    }
    else if (!(ctxt.domainNameLen()))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(Map1::SAD);
        }
        catch (...)
        {
            context.setState(Map1::SAD);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::Letter(context, symb);
    }


}

void Map1_DomainName_state::Point(SmcRecognizerContext& context, char symb)
{
    SmcRecognizer& ctxt = context.getOwner();

    if ((ctxt.domainNameLen()))
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.zeroLen();
            context.setState(Map1::DomainName_state);
        }
        catch (...)
        {
            context.setState(Map1::DomainName_state);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Point(context, symb);
    }


}

void Map1_DomainName_state::Unknown(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::SAD);
    }
    catch (...)
    {
        context.setState(Map1::SAD);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_ZoneName_state::EOS(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.addToTable();
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_ZoneName_state::Letter(SmcRecognizerContext& context, char symb)
{
    SmcRecognizer& ctxt = context.getOwner();

    if ((ctxt.zoneNameLen()))
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::ZoneName_state);
        context.getState().Entry(context);
    }
    else if (!(ctxt.zoneNameLen()))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(Map1::SAD);
        }
        catch (...)
        {
            context.setState(Map1::SAD);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::Letter(context, symb);
    }


}

void Map1_ZoneName_state::Point(SmcRecognizerContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::ZoneName_state);
    context.getState().Entry(context);


}

void Map1_ZoneName_state::Unknown(SmcRecognizerContext& context)
{
    SmcRecognizer& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::SAD);
    }
    catch (...)
    {
        context.setState(Map1::SAD);
        throw;
    }
    context.getState().Entry(context);


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
